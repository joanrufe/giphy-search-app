{"version":3,"sources":["utils/useGiphyApi.ts","GiphySearch/GiphyResults.tsx","GiphySearch/GiphySearch.tsx","GiphySearch/index.ts","utils/ErrorBoundary.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["defaultResponse","data","pagination","count","total_count","offset","buildUrl","query","encodedQuery","objectToQueryString","Object","objectSpread","api_key","concat","obj","keys","reduce","str","key","i","encodeURIComponent","join","GiphyItem","_ref2","title","extra","objectWithoutProperties","_extra$images$fixed_w","images","fixed_width","url","width","height","console","log","react_default","a","createElement","card_default","style","margin","cover","src","alt","Meta","href","target","GiphyResults","_ref","pageChange","currentIndex","Math","floor","Fragment","className","map","item","assign","id","pagination_default","current","total","pageSize","showQuickJumper","itemRender","page","type","Link","to","location","pathname","onChange","Header","Layout","Content","defaultQuery","q","limit","GiphySearch","_ref$location","arguments","length","undefined","search","initialQuery","parse","_useState","useState","_useState2","slicedToArray","searchValue","setSearchValue","_useGiphyApi","error","setError","_useState3","_useState4","loading","setLoading","_useState5","_useState6","respData","setResponseData","_useState7","_useState8","setQuery","useEffect","history","pushState","_fetchData","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","fetch","sent","json","t0","stop","this","apply","fetchData","fetchGifs","prevQuery","useGiphyApi","layout_default","color","textAlign","window","origin","form_default","onSubmit","ev","preventDefault","maxWidth","Item","Search_default","autoFocus","enterButton","defaultValue","onSearch","value","evt","GiphySearch_GiphyResults","newOffset","ErrorBoundary","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","errorInfo","setState","whiteSpace","toString","componentStack","children","React","Component","App","BrowserRouter","ErrorBoundary_ErrorBoundary","Route","path","component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5efd21a7.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport QueryModel from './QueryModel';\n\nconst defaultResponse = {\n\tdata: [],\n\tpagination: {\n\t\tcount: 0,\n\t\ttotal_count: 0,\n\t\toffset: 0\n\t}\n};\n\nconst baseUrl = 'https://api.giphy.com';\nconst searchRoute = '/v1/gifs/search';\n\nconst buildUrl = (query: QueryModel) => {\n\tconst encodedQuery = objectToQueryString({\n\t\t...query,\n\t\tapi_key: 'dc6zaTOxFJmzC'\n\t});\n\treturn `${baseUrl}${searchRoute}${encodedQuery}`;\n};\n\nexport function objectToQueryString(obj: QueryModel | any) {\n\treturn Object.keys(obj).reduce(function(str, key, i) {\n\t\tlet delimiter, val;\n\t\tdelimiter = i === 0 ? '?' : '&';\n\t\tkey = encodeURIComponent(key);\n\t\tval = encodeURIComponent(obj[key]);\n\t\treturn [ str, delimiter, key, '=', val ].join('');\n\t}, '');\n}\n\nexport default function useGiphyApi(initialQuery: QueryModel) {\n\tconst [ error, setError ] = useState(null);\n\tconst [ loading, setLoading ] = useState(true);\n\tconst [ respData, setResponseData ] = useState(null);\n  const [ query, setQuery ] = useState(initialQuery);\n\n  const fetchGifs = (query : QueryModel ) => {\n    setQuery((prevQuery) => ({ ...prevQuery, ...query }));\n  }\n\n  // Handle history and document title\n  useEffect(() => {\n    const encodedQuery = objectToQueryString(query);\n    history.pushState(encodedQuery, query.q || 'Giphy Search', encodedQuery);\n  }, [query]);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tasync function fetchData() {\n\t\t\t\tsetLoading(true);\n\t\t\t\tlet response;\n\t\t\t\tlet data;\n\n\t\t\t\ttry {\n\t\t\t\t\tresponse = await fetch(buildUrl(query));\n\t\t\t\t\tdata = await response.json();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tsetError(error);\n\t\t\t\t}\n\n\t\t\t\tsetResponseData(data);\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t\tfetchData();\n\t\t},\n\t\t[ query ]\n\t);\n\tconst { data, pagination } = respData || defaultResponse;\n\treturn {\n\t\terror,\n\t\tloading,\n\t\tdata,\n\t\tpagination,\n\t\tfetchGifs,\n\t\tquery\n\t};\n}\n","import React from 'react';\nimport Pagination from 'antd/lib/pagination';\nimport Card from 'antd/lib/card';\nimport { objectToQueryString } from '../utils/useGiphyApi'\nimport { Link } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport Query from '../utils/QueryModel';\n\ninterface PaginationObject {\n  total_count: number;\n  count: number;\n  offset: number;\n}\n\n\ninterface ResultsProps {\n\tdata: Array<Object>;\n\tpagination: PaginationObject;\n\tpageChange: (newOffset: number) => void;\n\tquery: Query;\n}\n\nfunction GiphyResults({ data, pagination, pageChange, query } : ResultsProps) {\n\tconst { total_count, count, offset } = pagination;\n  const currentIndex = Math.floor(offset / count) + 1;\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"items\">\n\t\t\t\t{data.map((item : any) => <GiphyItem key={item.id} {...item} />)}\n\t\t\t</div>\n\t\t\t<div className=\"footer\">\n\t\t\t\t<Pagination\n\t\t\t\t\tcurrent={currentIndex}\n\t\t\t\t\tkey={currentIndex}\n\t\t\t\t\ttotal={total_count}\n\t\t\t\t\tpageSize={count}\n\t\t\t\t\tshowQuickJumper\n\t\t\t\t\titemRender={(page, type) => {\n\t\t\t\t\t\tif (type === 'jump-prev') {\n\t\t\t\t\t\t\treturn <Link to={`${location.pathname}${objectToQueryString({...query, offset: page*count})}`}>{'<<'}</Link>;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (type === 'jump-next') {\n\t\t\t\t\t\t\treturn <Link to={`${location.pathname}${objectToQueryString({...query, offset: page*count})}`}>{'>>'}</Link>;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (type === 'prev') {\n\t\t\t\t\t\t\treturn <Link to={`${location.pathname}${objectToQueryString({...query, offset: page*count})}`}>{'<'}</Link>;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (type === 'next') {\n\t\t\t\t\t\t\treturn <Link to={`${location.pathname}${objectToQueryString({...query, offset: page*count})}`}>{'>'}</Link>;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn <Link to={`${location.pathname}${objectToQueryString({...query, offset: page*count})}`}>{page}</Link>;\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={(page) => {\n\t\t\t\t\t\tpageChange(page*count - count)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\ninterface ItemProps {\n\ttitle: string;\n\timages: any;\n\tsource_tld: string;\n}\n\nfunction GiphyItem({ title, ...extra } : ItemProps) {\n\tconst { url, width, height } = extra.images.fixed_width;\n\tconsole.log(extra.images)\n\treturn (\n\t\t<Card\n\t\t\tstyle={{ width: 240, margin: '20px auto', height: 'fit-content' }}\n\t\t\tcover={\n\t\t\t\t<img width={width} height={height} src={url} alt={title} />\n\t\t\t}>\n\t\t\t<Card.Meta title={<a href={url} target=\"_blank\">{title}</a>}/>\n\t\t</Card>\n\t);\n}\n\nexport default GiphyResults;\n","import React, { useState } from 'react';\nimport useGiphyApi from '../utils/useGiphyApi';\nimport GiphyResults from './GiphyResults';\nimport Search from 'antd/lib/input/Search';\nimport Form from 'antd/lib/form/';\nimport Layout from 'antd/lib/layout';\nimport {parse} from 'query-string';\nimport QueryModel from '../utils/QueryModel'\nimport './GiphySearch.css';\n\nconst {\n  Header, Content,\n} = Layout;\n\n\nconst defaultQuery : QueryModel = {\n\tq: 'cats',\n\tlimit: 10,\n\toffset: 0\n};\n\nfunction GiphySearch({ location = { search: ''} } = {}) {\n\tconst initialQuery : QueryModel = {\n\t\t...defaultQuery,\n\t\t...parse(location.search)\n\t};\n\tconst [searchValue, setSearchValue] = useState('');\n\tconst { error, loading, data, pagination, fetchGifs, query } = useGiphyApi(initialQuery);\n\n\tconst onSubmit = (ev : React.FormEvent<HTMLFormElement>) => {\n\t\tconst query : QueryModel= {\n\t\t\tq: searchValue,\n\t\t\toffset: 0,\n\t\t\tlimit: initialQuery.limit\n\t\t};\n\t\tfetchGifs(query);\n\t\tev.preventDefault();\n\t};\n\n\tconst pageChange = (newOffset : number) => {\n\t\tfetchGifs({ offset: newOffset });\n\t};\n\n\treturn (\n\t\t<Layout>\n\t\t\t<Header>\n\t\t\t\t<h1 style={{color: 'white', textAlign: 'center'}}>\n\t\t\t\t\t<a href={`${window.location.origin}${window.location.pathname}`}>Giphy Search App</a>\n\t\t\t\t</h1>\n\t\t\t</Header>\n\t\t\t<Content style={{width: '100%'}}>\n\t\t\t\t<Form onSubmit={onSubmit} style={{margin: '20px auto 20px auto', maxWidth: '250px'}}>\n\t\t\t\t\t<p>Enter a word or phrase:</p>\n\t\t\t\t\t<Form.Item>\n\t\t\t\t\t\t<Search\n\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\tenterButton\n\t\t\t\t\t\t\tdefaultValue={initialQuery.q}\n\t\t\t\t\t\t\tonSearch={(value) => {\n\t\t\t\t\t\t\t\tfetchGifs({q: value})\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonChange={evt => {\n\t\t\t\t\t\t\t\tsetSearchValue(evt.target.value)\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Item>\n\t\t\t\t</Form>\n\t\t\t\t{error && <div>{error}</div>}\n\t\t\t\t{!error && loading && <div>Loading...</div>}\n\t\t\t\t{!loading && !error && pagination && pagination.total_count === 0 && <div>No Results Found</div>}\n\t\t\t\t{\n\t\t\t\t\t!loading &&!error && (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p style={{textAlign: 'center'}}>Total Items <span>{pagination.total_count}</span></p>\n\t\t\t\t\t\t\t<GiphyResults data={data} pagination={pagination} pageChange={pageChange} query={query}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</Content>\n\t\t</Layout>\n\t);\n};\n\nexport default GiphySearch;\n","import GiphySearch from \"./GiphySearch\";\n\nexport default GiphySearch;\n","import React from \"react\";\n\ninterface State {\n  error: String | null;\n  errorInfo: any | null;\n}\n\nexport default class ErrorBoundary extends React.Component<{},State> {\n  constructor(props : any) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error : any, errorInfo : any) {\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import React, { CSSProperties } from \"react\";\nimport GiphySearch from \"./GiphySearch\";\nimport ErrorBoundary from \"./utils/ErrorBoundary\";\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nconst styles : CSSProperties = {\n  fontFamily: \"sans-serif\",\n  textAlign: \"center\",\n};\n\nconst App = () => (\n  <BrowserRouter>\n    <ErrorBoundary>\n        <Route path=\"/\" component={GiphySearch} />\n    </ErrorBoundary>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}